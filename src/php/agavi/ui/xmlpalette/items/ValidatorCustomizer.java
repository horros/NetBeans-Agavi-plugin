/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ItemCustomizer2.java
 *
 * Created on 1.6.2010, 19:05:22
 */
package php.agavi.ui.xmlpalette.items;

import java.awt.Component;
import java.awt.Dialog;
import java.awt.KeyboardFocusManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.KeyStroke;
import javax.swing.text.JTextComponent;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.NbBundle;

/**
 *
 * @author mle
 */
public class ValidatorCustomizer extends javax.swing.JPanel {

    private Dialog dialog = null;
    private DialogDescriptor descriptor = null;
    private boolean dialogOK = false;
    Validator item;
    JTextComponent target;

    /** Creates new form ValidatorCustomizer */
    public ValidatorCustomizer(Validator item, JTextComponent target) {
        this.item = item;
        this.target = target;

        initComponents();

        patch(arguments);
        patch(errors);
        patch(parameters);
    }

    private ComboBoxModel getSeverities() {
        String[] items = {"default", "info", "silent", "none", "notice", "error", "critical"};
        return new DefaultComboBoxModel(items);
    }

    private ComboBoxModel getClasses() {
        String[] classes = {"custom", "and", "arraylength", "datetime", "email", "equals", "file",
            "imagefile", "inarray", "isset", "not", "notempty", "number", "or", "regex",
            "set", "string", "xor"};
        return new DefaultComboBoxModel(classes);
    }

    public boolean showDialog() {

        dialogOK = false;

        String displayName = "";
        try {
            displayName = NbBundle.getBundle("fi.necora.netbeans.xmlpalette.items.resources.Bundle").getString("NAME_html-ITEM"); // NOI18N
        } catch (Exception e) {
        }

        descriptor = new DialogDescriptor(this, NbBundle.getMessage(ValidatorCustomizer.class, "LBL_Customizer_InsertPrefix") + " " + displayName, true,
                DialogDescriptor.OK_CANCEL_OPTION, DialogDescriptor.OK_OPTION,
                new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        if (descriptor.getValue().equals(DialogDescriptor.OK_OPTION)) {
                            evaluateInput();
                            dialogOK = true;
                        }
                        dialog.dispose();
                    }
                });

        dialog = DialogDisplayer.getDefault().createDialog(descriptor);
        dialog.setVisible(true);
        repaint();

        return dialogOK;

    }

    /**
     * Patch the behaviour of a component.
     * TAB transfers focus to the next focusable component,
     * SHIFT+TAB transfers focus to the previous focusable component.
     *
     * @author kaimu
     * @param c	The component to be patched.
     */
    public static void patch(Component c) {
        Set<KeyStroke> strokes = new HashSet<KeyStroke>(Arrays.asList(KeyStroke.getKeyStroke("pressed TAB")));
        c.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, strokes);
        strokes = new HashSet<KeyStroke>(Arrays.asList(KeyStroke.getKeyStroke("shift pressed TAB")));
        c.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, strokes);
    }

    private void evaluateInput() {

        item.setComment(comment.getText());
        item.setName(name.getText());
        item.setClass(validatorClass.getSelectedItem().toString());
        item.setExport(exportName.getText());
        item.setDepends(depends.getText());
        item.setMethod(validatorMethod.getText());
        item.setProvides(provides.getText());
        item.setTranslationDomain(translationDomain.getText());
        item.setSource(source.getText());
        item.setArguments(arguments.getText());
        item.setErrors(errors.getText());
        item.setParameters(parameters.getText());
        item.setBase(base.getText());
        item.setRequired(required.isSelected());
        item.setSeverity(severity.getSelectedItem().toString());


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    comment = new javax.swing.JTextField();
    jLabel2 = new javax.swing.JLabel();
    severity = new javax.swing.JComboBox();
    jLabel3 = new javax.swing.JLabel();
    name = new javax.swing.JTextField();
    jLabel4 = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    exportName = new javax.swing.JTextField();
    jLabel6 = new javax.swing.JLabel();
    depends = new javax.swing.JTextField();
    jLabel7 = new javax.swing.JLabel();
    validatorMethod = new javax.swing.JTextField();
    provides = new javax.swing.JTextField();
    jLabel8 = new javax.swing.JLabel();
    translationDomain = new javax.swing.JTextField();
    jLabel9 = new javax.swing.JLabel();
    source = new javax.swing.JTextField();
    jLabel10 = new javax.swing.JLabel();
    jLabel11 = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    arguments = new javax.swing.JTextArea();
    jLabel12 = new javax.swing.JLabel();
    jScrollPane2 = new javax.swing.JScrollPane();
    errors = new javax.swing.JTextArea();
    jLabel13 = new javax.swing.JLabel();
    jScrollPane3 = new javax.swing.JScrollPane();
    parameters = new javax.swing.JTextArea();
    jLabel14 = new javax.swing.JLabel();
    base = new javax.swing.JTextField();
    required = new javax.swing.JCheckBox();
    validatorClass = new javax.swing.JComboBox();

    jLabel1.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.jLabel1.text")); // NOI18N

    comment.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.comment.text")); // NOI18N

    jLabel2.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.jLabel2.text")); // NOI18N

    severity.setModel(getSeverities());

    jLabel3.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.jLabel3.text")); // NOI18N

    name.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.name.text")); // NOI18N

    jLabel4.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.jLabel4.text")); // NOI18N

    jLabel5.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.jLabel5.text")); // NOI18N

    exportName.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.exportName.text")); // NOI18N
    exportName.setToolTipText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.exportName.toolTipText")); // NOI18N

    jLabel6.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.jLabel6.text")); // NOI18N

    depends.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.depends.text")); // NOI18N
    depends.setToolTipText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.depends.toolTipText")); // NOI18N

    jLabel7.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.jLabel7.text")); // NOI18N

    validatorMethod.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.validatorMethod.text")); // NOI18N

    provides.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.provides.text")); // NOI18N

    jLabel8.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.jLabel8.text")); // NOI18N

    translationDomain.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.translationDomain.text")); // NOI18N

    jLabel9.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.jLabel9.text")); // NOI18N

    source.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.source.text")); // NOI18N

    jLabel10.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.jLabel10.text")); // NOI18N

    jLabel11.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.jLabel11.text")); // NOI18N

    arguments.setColumns(20);
    arguments.setRows(5);
    arguments.setToolTipText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.arguments.toolTipText")); // NOI18N
    jScrollPane1.setViewportView(arguments);

    jLabel12.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.jLabel12.text")); // NOI18N

    errors.setColumns(20);
    errors.setRows(5);
    jScrollPane2.setViewportView(errors);

    jLabel13.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.jLabel13.text")); // NOI18N

    parameters.setColumns(20);
    parameters.setRows(5);
    jScrollPane3.setViewportView(parameters);

    jLabel14.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.jLabel14.text")); // NOI18N

    base.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.base.text")); // NOI18N

    required.setSelected(true);
    required.setText(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.required.text")); // NOI18N
    required.setActionCommand(org.openide.util.NbBundle.getMessage(ValidatorCustomizer.class, "ValidatorCustomizer.required.actionCommand")); // NOI18N
    required.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        requiredActionPerformed(evt);
      }
    });

    validatorClass.setModel(getClasses());

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
          .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
          .addComponent(jLabel11)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel2)
            .addGap(18, 18, 18)
            .addComponent(severity, 0, 201, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel6)
              .addComponent(jLabel7)
              .addComponent(jLabel8)
              .addComponent(jLabel9)
              .addComponent(jLabel10)
              .addComponent(jLabel5)
              .addComponent(jLabel1)
              .addComponent(jLabel3)
              .addComponent(jLabel4))
            .addGap(10, 10, 10)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
              .addComponent(comment, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
              .addComponent(exportName, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
              .addComponent(validatorMethod, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
              .addComponent(depends, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
              .addComponent(provides, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
              .addComponent(translationDomain, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
              .addComponent(source, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
              .addComponent(validatorClass, 0, 197, Short.MAX_VALUE)))
          .addComponent(jLabel12)
          .addComponent(jLabel13)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel14)
            .addGap(18, 18, 18)
            .addComponent(base, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE))
          .addComponent(required))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(comment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel3))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel4)
          .addComponent(validatorClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(exportName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel5))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(depends, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel6))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(validatorMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel7))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(provides, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel8))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(translationDomain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel9))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(source, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel10))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel11)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel12)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel13)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel14)
          .addComponent(base, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(required)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(severity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

    private void requiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requiredActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_requiredActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextArea arguments;
  private javax.swing.JTextField base;
  private javax.swing.JTextField comment;
  private javax.swing.JTextField depends;
  private javax.swing.JTextArea errors;
  private javax.swing.JTextField exportName;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel10;
  private javax.swing.JLabel jLabel11;
  private javax.swing.JLabel jLabel12;
  private javax.swing.JLabel jLabel13;
  private javax.swing.JLabel jLabel14;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JLabel jLabel9;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JTextField name;
  private javax.swing.JTextArea parameters;
  private javax.swing.JTextField provides;
  private javax.swing.JCheckBox required;
  private javax.swing.JComboBox severity;
  private javax.swing.JTextField source;
  private javax.swing.JTextField translationDomain;
  private javax.swing.JComboBox validatorClass;
  private javax.swing.JTextField validatorMethod;
  // End of variables declaration//GEN-END:variables
}
